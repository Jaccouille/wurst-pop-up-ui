package PopUpFrame

import ClosureTimers
import HashMap
import LinkedList

@configurable let DEFAULT_TRANSITION_SPEED = 0.3
@configurable let DEFAULT_POP_UP_ANIMATION_PERIOD = 0.03


public abstract class PopUpFrame
    // The pop up frames
    static let popUpPerPlayer = new HashMap<player, LinkedList<PopUpFrame>>
    private framehandle popUpFrame = null
    private var currentPos = vec2(0, 0)
    private var initialPos = vec2(0, 0)
    private player _p
    CallbackCounted movementLoop
    private var transitionSpeed = DEFAULT_TRANSITION_SPEED
    private var animationPeriod = DEFAULT_POP_UP_ANIMATION_PERIOD
    private framepointtype point = FRAMEPOINT_BOTTOMRIGHT

    static function initialize()
        // Init PopUp tracker map
        for i = 0 to bj_MAX_PLAYERS - 1
            if players[i].isIngame()
                PopUpFrame.addPlayer(players[i])

    static function addPlayer(player _p)
        popUpPerPlayer.put(_p, new LinkedList<PopUpFrame>)

    static function removePlayer(player _p)
        popUpPerPlayer.remove(_p)

    static function ofPlayer(player query) returns LinkedList<PopUpFrame>
        return popUpPerPlayer.get(query)

    construct(player _p, vec2 initialPos, vec2 currentPos, real lifetime)
        this._p = _p
        this.initialPos = initialPos
        this.currentPos = currentPos

        // Create frame with 0 as context so we can setup icon right away
        popUpFrame = createSimpleFrame("PopUpPanel", GAME_UI, 0)
            ..show(_p)
        PopUpFrame.ofPlayer(_p).addtoStart(this)

        // Destroy frame after lifetime seconds
        doAfter(lifetime) ->
            destroy this

    /**
        Moves the frame to the new coordinates  during specified duration
        Refresh the frame position every period
    **/
    private function slide(vec2 newPos)
        let stepY = (newPos.y - currentPos.y) / (transitionSpeed / animationPeriod)
        let stepX = (newPos.x - currentPos.x) / (transitionSpeed / animationPeriod)
        movementLoop = doPeriodicallyTimed(animationPeriod, transitionSpeed) cb ->
            if movementLoop != cb or this == null
                destroy cb
            this.setAbsPoint(currentPos + vec2(stepX, stepY))

    protected function updateFramesPosition(vec2 factor)
        let popUpList = PopUpFrame.ofPlayer(this._p)
        // Go over all the frames registered and move them up
        for popUp in popUpList
            let offset = vec2(popUp.getFrameWidth(), popUp.getFrameHeight()) * factor
            let idx = popUpList.indexOf(popUp)
            let newX = popUp.getInitialPos().x + idx * offset.x
            let newY = popUp.getInitialPos().y + idx * offset.y
            popUp.setCurrentPos(vec2(newX, newY), true)

    function setIcons(string iconLeft, string iconMiddle, string iconRight)
        getFrame("IconLeft")
            ..setTexture(iconLeft, 0, true)
        getFrame("IconMiddle")
            ..setTexture(iconMiddle, 0, true)
        getFrame("IconRight")
            ..setTexture(iconRight, 0, true)

    private function setAbsPoint(vec2 pos)
        this.currentPos = pos
        popUpFrame.setAbsPoint(point, pos.x, pos.y)

    function setFramepointType(framepointtype point)
        this.point = point

    function setInitialPos(vec2 pos)
        this.initialPos = pos

    function getInitialPos() returns vec2
        return this.initialPos

    function setCurrentPos(vec2 pos, boolean slide)
        if slide
            this.slide(pos)
        else
            this.setAbsPoint(pos)

    function getCurrentPos() returns vec2
        return this.currentPos

    function setTransitionSpeed(real transitionSpeed)
        this.transitionSpeed = transitionSpeed

    function setAnimationPeriod(real period)
        this.animationPeriod = period

    function setScale(real scale)
        this.popUpFrame.setScale(scale)

    function getFrameHeight() returns real
        return this.popUpFrame.getHeight()

    function getFrameWidth() returns real
        return this.popUpFrame.getWidth()

    ondestroy
        popUpPerPlayer.get(_p).remove(this)
        popUpFrame.remove()


public class PopUpTop extends PopUpFrame
    construct(player _p,  vec2 initialPos, vec2 currentPos, real lifetime)
        super(_p, initialPos, currentPos, lifetime)
        let slideOffset = vec2(0, -1)
        this.updateFramesPosition(slideOffset)

public class PopUpBottom extends PopUpFrame
    construct(player _p,  vec2 initialPos, vec2 currentPos, real lifetime)
        super(_p, initialPos, currentPos, lifetime)
        let slideOffset = vec2(0, 1)
        this.updateFramesPosition(slideOffset)


init
    if loadTOCFile("PopUp.toc") == false
        print("toc file loading failure")
    else
        PopUpTop.initialize()
        PopUpBottom.initialize()
